{"ast":null,"code":"import React, { useReducer, useEffect } from 'react';\nimport requestReducer, { REQUEST_STATUS } from '../reducers/request';\nimport axios from 'axios';\nimport { GET_ALL_FAILURE, GET_ALL_SUCCESS, PUT_FAILURE, PUT_SUCCESS, PUT } from '../actions/request';\n\nconst useRequest = (baseUrl, routeName) => {\n  const {\n    0: {\n      records,\n      status,\n      error\n    },\n    1: dispatch\n  } = useReducer(requestReducer, {\n    status: REQUEST_STATUS.LOADING,\n    records: [],\n    error: null\n  });\n  const signal = React.useRef(axios.CancelToken.source());\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(`${baseUrl}/${routeName}`, {\n          cancelToken: signal.current.token\n        });\n        dispatch({\n          type: GET_ALL_SUCCESS,\n          records: response.data\n        });\n      } catch (e) {\n        console.log('Loading data error', e);\n\n        if (axios.isCancel(e)) {\n          console.log('Get request canceled');\n        } else {\n          dispatch({\n            type: GET_ALL_FAILURE,\n            error: e\n          });\n        }\n      }\n    };\n\n    fetchData();\n    return () => {\n      console.log('unmount and cancel running axios request');\n      signal.current.cancel();\n    };\n  }, [baseUrl, routeName]);\n  const propsLocal = {\n    records,\n    status,\n    error,\n    put: React.useCallback(async record => {\n      try {\n        dispatch({\n          type: PUT,\n          record\n        });\n        await axios.put(`${baseUrl}/${routeName}/${record.id}`, record);\n        dispatch({\n          type: PUT_SUCCESS,\n          record: record\n        });\n      } catch (e) {\n        dispatch({\n          type: PUT_FAILURE,\n          error: e\n        });\n      }\n    }, [])\n  };\n  return propsLocal;\n};\n\nexport default useRequest;","map":null,"metadata":{},"sourceType":"module"}