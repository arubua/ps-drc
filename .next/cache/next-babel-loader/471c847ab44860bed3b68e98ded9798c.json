{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_ALL_SUCCESS, GET_ALL_FAILURE, PUT_SUCCESS, PUT_FAILURE } from '../actions/request';\nexport var REQUEST_STATUS = {\n  LOADING: 'loading',\n  SUCCESS: 'success',\n  ERROR: 'error'\n};\n\nvar requestReducer = function requestReducer(state, action) {\n  switch (action.type) {\n    case GET_ALL_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          records: action.records,\n          status: REQUEST_STATUS.SUCCESS\n        });\n      }\n\n    case GET_ALL_FAILURE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          status: REQUEST_STATUS.ERROR,\n          error: action.error\n        });\n      }\n\n    case PUT_SUCCESS:\n      var records = state.records;\n      var record = action.record;\n      var recordIndex = records.map(function (rec) {\n        return rec.id;\n      }).indexOf(record.id);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        records: [].concat(_toConsumableArray(records.slice(0, recordIndex)), [record], _toConsumableArray(records.slice(recordIndex + 1)))\n      });\n\n    case PUT_FAILURE:\n      console.log('PUT_FAILURE: Currently just logging to console without refreshing records list');\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default requestReducer;","map":null,"metadata":{},"sourceType":"module"}