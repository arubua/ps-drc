{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_ALL_SUCCESS, GET_ALL_FAILURE, PUT_SUCCESS, PUT_FAILURE, PUT } from '../actions/request';\nexport const REQUEST_STATUS = {\n  LOADING: 'loading',\n  SUCCESS: 'success',\n  ERROR: 'error'\n};\n\nconst requestReducer = (state, action) => {\n  switch (action.type) {\n    case GET_ALL_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          records: action.records,\n          status: REQUEST_STATUS.SUCCESS\n        });\n      }\n\n    case GET_ALL_FAILURE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          status: REQUEST_STATUS.ERROR,\n          error: action.error\n        });\n      }\n\n    case PUT:\n      const {\n        records\n      } = state;\n      const {\n        record\n      } = action;\n      const recordIndex = records.map(rec => rec.id).indexOf(record.id);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        prevRecords: state.records,\n        records: [...records.slice(0, recordIndex), record, ...records.slice(recordIndex + 1)]\n      });\n\n    case PUT_SUCCESS:\n      return state;\n\n    case PUT_FAILURE:\n      console.log('PUT_FAILURE: Currently just logging to console without refreshing records list');\n      return _objectSpread(_objectSpread({}, state), {}, {\n        records: state.prevRecords,\n        error: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default requestReducer;","map":null,"metadata":{},"sourceType":"module"}