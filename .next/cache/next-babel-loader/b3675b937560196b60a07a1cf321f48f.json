{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useReducer, useEffect } from 'react';\nimport requestReducer, { REQUEST_STATUS } from '../reducers/request';\nimport axios from 'axios';\nimport { GET_ALL_FAILURE, GET_ALL_SUCCESS, PUT_FAILURE, PUT_SUCCESS, PUT } from '../actions/request';\n\nvar useRequest = function useRequest(baseUrl, routeName) {\n  var _useReducer = useReducer(requestReducer, {\n    status: REQUEST_STATUS.LOADING,\n    records: [],\n    error: null\n  }),\n      _useReducer$ = _useReducer[0],\n      records = _useReducer$.records,\n      status = _useReducer$.status,\n      error = _useReducer$.error,\n      dispatch = _useReducer[1];\n\n  var signal = React.useRef(axios.CancelToken.source());\n  useEffect(function () {\n    var fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return axios.get(\"\".concat(baseUrl, \"/\").concat(routeName), {\n                  cancelToken: signal.current.token\n                });\n\n              case 3:\n                response = _context.sent;\n                dispatch({\n                  type: GET_ALL_SUCCESS,\n                  records: response.data\n                });\n                _context.next = 11;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                console.log('Loading data error', _context.t0);\n\n                if (axios.isCancel(_context.t0)) {\n                  console.log('Get request canceled');\n                } else {\n                  dispatch({\n                    type: GET_ALL_FAILURE,\n                    error: _context.t0\n                  });\n                }\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 7]]);\n      }));\n\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n    return function () {\n      console.log('unmount and cancel running axios request');\n      signal.current.cancel();\n    };\n  }, [baseUrl, routeName]);\n  var propsLocal = {\n    records: records,\n    status: status,\n    error: error,\n    put: React.useCallback( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(record) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                dispatch({\n                  type: PUT,\n                  record: record\n                });\n                _context2.next = 4;\n                return axios.put(\"\".concat(baseUrl, \"/\").concat(routeName, \"/\").concat(record.id), record);\n\n              case 4:\n                dispatch({\n                  type: PUT_SUCCESS,\n                  record: record\n                });\n                _context2.next = 10;\n                break;\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n                dispatch({\n                  type: PUT_FAILURE,\n                  error: _context2.t0\n                });\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 7]]);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }(), [])\n  };\n  return propsLocal;\n};\n\nexport default useRequest;","map":null,"metadata":{},"sourceType":"module"}