{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_ALL_SUCCESS, GET_ALL_FAILURE, PUT_SUCCESS, PUT_FAILURE } from '../actions/request';\nexport const REQUEST_STATUS = {\n  LOADING: 'loading',\n  SUCCESS: 'success',\n  ERROR: 'error'\n};\n\nconst requestReducer = (state, action) => {\n  switch (action.type) {\n    case GET_ALL_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          records: action.records,\n          status: REQUEST_STATUS.SUCCESS\n        });\n      }\n\n    case GET_ALL_FAILURE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          status: REQUEST_STATUS.ERROR,\n          error: action.error\n        });\n      }\n\n    case PUT_SUCCESS:\n      const {\n        records\n      } = state;\n      const {\n        record\n      } = action;\n      const recordIndex = records.map(rec => rec.id).indexOf(record.id);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        records: [...records.slice(0, recordIndex), record, ...records.slice(recordIndex + 1)]\n      });\n\n    case PUT_FAILURE:\n      console.log('PUT_FAILURE: Currently just logging to console without refreshing records list');\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default requestReducer;","map":{"version":3,"sources":["/media/swungleek/7a739554-06f9-4564-a099-49f4b83047ae/CDD/React/ps-drc/src/reducers/request.js"],"names":["GET_ALL_SUCCESS","GET_ALL_FAILURE","PUT_SUCCESS","PUT_FAILURE","REQUEST_STATUS","LOADING","SUCCESS","ERROR","requestReducer","state","action","type","records","status","error","record","recordIndex","map","rec","id","indexOf","slice","console","log"],"mappings":";;;;;;AAAA,SACEA,eADF,EAEEC,eAFF,EAGEC,WAHF,EAIEC,WAJF,QAKO,oBALP;AAOA,OAAO,MAAMC,cAAc,GAAG;AAC5BC,EAAAA,OAAO,EAAE,SADmB;AAE5BC,EAAAA,OAAO,EAAE,SAFmB;AAG5BC,EAAAA,KAAK,EAAE;AAHqB,CAAvB;;AAMP,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,eAAL;AAAsB;AACpB,+CACKS,KADL;AAEEG,UAAAA,OAAO,EAAEF,MAAM,CAACE,OAFlB;AAGEC,UAAAA,MAAM,EAAET,cAAc,CAACE;AAHzB;AAKD;;AACD,SAAKL,eAAL;AAAsB;AACpB,+CACKQ,KADL;AAEEI,UAAAA,MAAM,EAAET,cAAc,CAACG,KAFzB;AAGEO,UAAAA,KAAK,EAAEJ,MAAM,CAACI;AAHhB;AAKD;;AACD,SAAKZ,WAAL;AACE,YAAM;AAAEU,QAAAA;AAAF,UAAcH,KAApB;AACA,YAAM;AAAEM,QAAAA;AAAF,UAAaL,MAAnB;AACA,YAAMM,WAAW,GAAGJ,OAAO,CAACK,GAAR,CAAaC,GAAD,IAASA,GAAG,CAACC,EAAzB,EAA6BC,OAA7B,CAAqCL,MAAM,CAACI,EAA5C,CAApB;AACA,6CACKV,KADL;AAEEG,QAAAA,OAAO,EAAE,CACP,GAAGA,OAAO,CAACS,KAAR,CAAc,CAAd,EAAiBL,WAAjB,CADI,EAEPD,MAFO,EAGP,GAAGH,OAAO,CAACS,KAAR,CAAcL,WAAW,GAAG,CAA5B,CAHI;AAFX;;AAQF,SAAKb,WAAL;AACEmB,MAAAA,OAAO,CAACC,GAAR,CACE,gFADF;AAGA,6CACKd,KADL;AAEEK,QAAAA,KAAK,EAAEJ,MAAM,CAACI;AAFhB;;AAIF;AACE,aAAOL,KAAP;AApCJ;AAsCD,CAvCD;;AAwCA,eAAeD,cAAf","sourcesContent":["import {\n  GET_ALL_SUCCESS,\n  GET_ALL_FAILURE,\n  PUT_SUCCESS,\n  PUT_FAILURE,\n} from '../actions/request';\n\nexport const REQUEST_STATUS = {\n  LOADING: 'loading',\n  SUCCESS: 'success',\n  ERROR: 'error',\n};\n\nconst requestReducer = (state, action) => {\n  switch (action.type) {\n    case GET_ALL_SUCCESS: {\n      return {\n        ...state,\n        records: action.records,\n        status: REQUEST_STATUS.SUCCESS,\n      };\n    }\n    case GET_ALL_FAILURE: {\n      return {\n        ...state,\n        status: REQUEST_STATUS.ERROR,\n        error: action.error,\n      };\n    }\n    case PUT_SUCCESS:\n      const { records } = state;\n      const { record } = action;\n      const recordIndex = records.map((rec) => rec.id).indexOf(record.id);\n      return {\n        ...state,\n        records: [\n          ...records.slice(0, recordIndex),\n          record,\n          ...records.slice(recordIndex + 1),\n        ],\n      };\n    case PUT_FAILURE:\n      console.log(\n        'PUT_FAILURE: Currently just logging to console without refreshing records list',\n      );\n      return {\n        ...state,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n};\nexport default requestReducer;\n"]},"metadata":{},"sourceType":"module"}