{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/media/swungleek/7a739554-06f9-4564-a099-49f4b83047ae/CDD/React/ps-drc/src/contexts/DataContext.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from 'react';\nvar DataContext = /*#__PURE__*/createContext();\n\nvar DataProvider = function DataProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n  var speakers = [{\n    id: 1530,\n    firstName: \"Tamara\",\n    lastName: \"Baker\",\n    sat: false,\n    sun: true,\n    isFavorite: false,\n    bio: \"Tammy has held a number of executive and management roles over the past 15 years, including VP engineering Roles at Molekule Inc., Cantaloupe Systems, E-Color, and Untangle Inc.\"\n  }, {\n    id: 10803,\n    firstName: \"Eugene\",\n    lastName: \"Chuvyrov\",\n    sat: true,\n    sun: false,\n    isFavorite: true,\n    bio: \"Eugene Chuvyrov is a Senior Cloud Architect at Microsoft. He works directly with both startups and enterprises to enable their solutions in Microsoft cloud, and to make Azure better as a result of this work with partners.\"\n  }, {\n    id: 1124,\n    firstName: \"Douglas\",\n    lastName: \"Crockford\",\n    sat: true,\n    sun: false,\n    isFavorite: false,\n    bio: \"Douglas Crockford discovered the JSON Data Interchange Format. He is also the author of _JavaScript: The Good Parts_. He has been called a guru, but he is actually more of a mahatma.\"\n  }];\n\n  var _useState = useState({\n    speakers: speakers,\n    status: 'loading'\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    var timer = setTimeout(function () {\n      setState({\n        speakers: speakers,\n        status: 'success',\n        error: undefined\n      });\n    }, 1000);\n    return function () {\n      return clearTimeout(timer);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: state,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(DataProvider, \"x3bcUamhHrIqcf9+lIWjkCku3rw=\");\n\n_c = DataProvider;\nexport { DataContext, DataProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"sources":["/media/swungleek/7a739554-06f9-4564-a099-49f4b83047ae/CDD/React/ps-drc/src/contexts/DataContext.js"],"names":["React","createContext","useEffect","useState","DataContext","DataProvider","children","speakers","id","firstName","lastName","sat","sun","isFavorite","bio","status","state","setState","timer","setTimeout","error","undefined","clearTimeout"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,IAAMC,WAAW,gBAAGH,aAAa,EAAjC;;AAEA,IAAMI,YAAY,GAAG,SAAfA,YAAe,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;AACrC,MAAMC,QAAQ,GAAG,CACf;AACAC,IAAAA,EAAE,EAAE,IADJ;AAEAC,IAAAA,SAAS,EAAE,QAFX;AAGAC,IAAAA,QAAQ,EAAE,OAHV;AAIAC,IAAAA,GAAG,EAAE,KAJL;AAKAC,IAAAA,GAAG,EAAE,IALL;AAMAC,IAAAA,UAAU,EAAE,KANZ;AAOAC,IAAAA,GAAG,EAAE;AAPL,GADe,EAUf;AACAN,IAAAA,EAAE,EAAE,KADJ;AAEAC,IAAAA,SAAS,EAAE,QAFX;AAGAC,IAAAA,QAAQ,EAAE,UAHV;AAIAC,IAAAA,GAAG,EAAE,IAJL;AAKAC,IAAAA,GAAG,EAAE,KALL;AAMAC,IAAAA,UAAU,EAAE,IANZ;AAOAC,IAAAA,GAAG,EAAE;AAPL,GAVe,EAmBf;AACAN,IAAAA,EAAE,EAAE,IADJ;AAEAC,IAAAA,SAAS,EAAE,SAFX;AAGAC,IAAAA,QAAQ,EAAE,WAHV;AAIAC,IAAAA,GAAG,EAAE,IAJL;AAKAC,IAAAA,GAAG,EAAE,KALL;AAMAC,IAAAA,UAAU,EAAE,KANZ;AAOAC,IAAAA,GAAG,EAAE;AAPL,GAnBe,CAAjB;;AADqC,kBA+BTX,QAAQ,CAAE;AAClCI,IAAAA,QAAQ,EAACA,QADyB;AAElCQ,IAAAA,MAAM,EAAC;AAF2B,GAAF,CA/BC;AAAA,MA+B5BC,KA/B4B;AAAA,MA+BrBC,QA/BqB;;AAoCnCf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMgB,KAAK,GAAGC,UAAU,CAAC,YAAM;AAC7BF,MAAAA,QAAQ,CAAC;AACPV,QAAAA,QAAQ,EAACA,QADF;AAEPQ,QAAAA,MAAM,EAAC,SAFA;AAGPK,QAAAA,KAAK,EAAEC;AAHA,OAAD,CAAR;AAKD,KANuB,EAMrB,IANqB,CAAxB;AAOA,WAAO;AAAA,aAAMC,YAAY,CAACJ,KAAD,CAAlB;AAAA,KAAP;AACD,GATQ,EASN,EATM,CAAT;AAWF,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEF,KAA7B;AAAA,cACGV;AADH;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CApDD;;GAAMD,Y;;KAAAA,Y;AAsDN,SAASD,WAAT,EAAsBC,YAAtB","sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\nconst DataContext = createContext();\n\nconst DataProvider = ({ children }) => {\n  const speakers = [\n    {\n    id: 1530,\n    firstName: \"Tamara\",\n    lastName: \"Baker\",\n    sat: false,\n    sun: true,\n    isFavorite: false,\n    bio: \"Tammy has held a number of executive and management roles over the past 15 years, including VP engineering Roles at Molekule Inc., Cantaloupe Systems, E-Color, and Untangle Inc.\"\n    },\n    {\n    id: 10803,\n    firstName: \"Eugene\",\n    lastName: \"Chuvyrov\",\n    sat: true,\n    sun: false,\n    isFavorite: true,\n    bio: \"Eugene Chuvyrov is a Senior Cloud Architect at Microsoft. He works directly with both startups and enterprises to enable their solutions in Microsoft cloud, and to make Azure better as a result of this work with partners.\"\n    },\n    {\n    id: 1124,\n    firstName: \"Douglas\",\n    lastName: \"Crockford\",\n    sat: true,\n    sun: false,\n    isFavorite: false,\n    bio: \"Douglas Crockford discovered the JSON Data Interchange Format. He is also the author of _JavaScript: The Good Parts_. He has been called a guru, but he is actually more of a mahatma.\"\n    }\n    ];\n\n    const [state, setState] = useState ({\n      speakers:speakers,\n      status:'loading'\n    });\n\n    useEffect(() => {\n      const timer = setTimeout(() => {\n        setState({\n          speakers:speakers,\n          status:'success',\n          error: undefined\n        });\n      }, 1000);\n      return () => clearTimeout(timer);\n    }, []);\n\n  return (\n    <DataContext.Provider value={state}>\n      {children}\n    </DataContext.Provider>\n  );\n};\n\nexport { DataContext, DataProvider };\n"]},"metadata":{},"sourceType":"module"}