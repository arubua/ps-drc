{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/media/swungleek/7a739554-06f9-4564-a099-49f4b83047ae/CDD/React/ps-drc/src/components/Speakers/Speakers.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport Speaker from '../Speaker/Speaker';\nimport SpeakerSearchBar from '../SpeakerSearchBar/SpeakerSearchBar';\n\nvar Speakers = function Speakers() {\n  _s();\n\n  var _useState = useState(\"\"),\n      searchQuery = _useState[0],\n      setSearchQuery = _useState[1];\n\n  var speakers = [{\n    imageSrc: 'speaker-component-1124',\n    name: 'Douglas Crockford',\n    id: 1124,\n    firstName: 'Douglas',\n    lastName: 'Crockford',\n    sat: true,\n    sun: false,\n    isFavorite: false,\n    bio: 'Douglas Crockford discovered the JSON Data Interchange Format. He is also the author of _JavaScript: The Good Parts_. He has been called a guru, but he is actually more of a mahatma.'\n  }, {\n    imageSrc: 'speaker-component-1530',\n    name: 'Tamara Baker',\n    id: 1530,\n    firstName: 'Tamara',\n    lastName: 'Baker',\n    sat: false,\n    sun: true,\n    isFavorite: true,\n    bio: 'Tammy has held a number of executive and management roles over the past 15 years, including VP engineering Roles at Molekule Inc., Cantaloupe Systems, E-Color, and Untangle Inc.'\n  }, {\n    imageSrc: 'speaker-component-10803',\n    name: 'Eugene Chuvyrov',\n    id: 10803,\n    firstName: 'Eugene',\n    lastName: 'Chuvyrov',\n    sat: true,\n    sun: false,\n    isFavorite: false,\n    bio: 'Eugene Chuvyrov is  a Senior Cloud Architect at Microsoft. He works directly with both startups and enterprises to enable their solutions in Microsoft cloud, and to make Azure better as a result of this work with partners.'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(SpeakerSearchBar, {\n      searchQuery: searchQuery,\n      setSearchQuery: setSearchQuery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid md:grid-cols-2 lg:grid-cols-3 grid-cols-1 gap-12\",\n      children: speakers.filter(function (rec) {\n        var targetString = \"\".concat(rec.firstName, \" \").concat(rec.lastName).toLowerCase();\n        return searchQuery.length === 0 ? true : targetString.includes(searchQuery.toLocaleLowerCase());\n      }).map(function (speaker) {\n        return /*#__PURE__*/_jsxDEV(Speaker, _objectSpread({}, speaker), speaker.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 19\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Speakers, \"4qjSsAxfhX8/4SmzAosofhRF9cY=\");\n\n_c = Speakers;\nexport default Speakers;\n\nvar _c;\n\n$RefreshReg$(_c, \"Speakers\");","map":{"version":3,"sources":["/media/swungleek/7a739554-06f9-4564-a099-49f4b83047ae/CDD/React/ps-drc/src/components/Speakers/Speakers.js"],"names":["React","useState","Speaker","SpeakerSearchBar","Speakers","searchQuery","setSearchQuery","speakers","imageSrc","name","id","firstName","lastName","sat","sun","isFavorite","bio","filter","rec","targetString","toLowerCase","length","includes","toLocaleLowerCase","map","speaker"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AAEA,OAAOC,OAAP,MAAmB,oBAAnB;AACA,OAAOC,gBAAP,MAA6B,sCAA7B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA;;AAAA,kBAEgBH,QAAQ,CAAC,EAAD,CAFxB;AAAA,MAEdI,WAFc;AAAA,MAEFC,cAFE;;AAGrB,MAAMC,QAAQ,GAAG,CACf;AACEC,IAAAA,QAAQ,EAAE,wBADZ;AAEEC,IAAAA,IAAI,EAAE,mBAFR;AAGEC,IAAAA,EAAE,EAAE,IAHN;AAIEC,IAAAA,SAAS,EAAE,SAJb;AAKEC,IAAAA,QAAQ,EAAE,WALZ;AAMEC,IAAAA,GAAG,EAAE,IANP;AAOEC,IAAAA,GAAG,EAAE,KAPP;AAQEC,IAAAA,UAAU,EAAE,KARd;AASEC,IAAAA,GAAG,EACD;AAVJ,GADe,EAaf;AACER,IAAAA,QAAQ,EAAE,wBADZ;AAEEC,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,EAAE,EAAE,IAHN;AAIEC,IAAAA,SAAS,EAAE,QAJb;AAKEC,IAAAA,QAAQ,EAAE,OALZ;AAMEC,IAAAA,GAAG,EAAE,KANP;AAOEC,IAAAA,GAAG,EAAE,IAPP;AAQEC,IAAAA,UAAU,EAAE,IARd;AASEC,IAAAA,GAAG,EACD;AAVJ,GAbe,EAyBf;AACER,IAAAA,QAAQ,EAAE,yBADZ;AAEEC,IAAAA,IAAI,EAAE,iBAFR;AAGEC,IAAAA,EAAE,EAAE,KAHN;AAIEC,IAAAA,SAAS,EAAE,QAJb;AAKEC,IAAAA,QAAQ,EAAE,UALZ;AAMEC,IAAAA,GAAG,EAAE,IANP;AAOEC,IAAAA,GAAG,EAAE,KAPP;AAQEC,IAAAA,UAAU,EAAE,KARd;AASEC,IAAAA,GAAG,EACD;AAVJ,GAzBe,CAAjB;AAsCA,sBACE;AAAA,4BACE,QAAC,gBAAD;AAAkB,MAAA,WAAW,EAAEX,WAA/B;AAA4C,MAAA,cAAc,EAAEC;AAA5D;AAAA;AAAA;AAAA;AAAA,aADF,eAEE;AAAK,MAAA,SAAS,EAAC,uDAAf;AAAA,gBACWC,QAAQ,CACRU,MADA,CACO,UAACC,GAAD,EAAS;AACf,YAAMC,YAAY,GAAG,UAAGD,GAAG,CAACP,SAAP,cAAoBO,GAAG,CAACN,QAAxB,EAAmCQ,WAAnC,EAArB;AACA,eAAOf,WAAW,CAACgB,MAAZ,KAAuB,CAAvB,GAA2B,IAA3B,GAAkCF,YAAY,CAACG,QAAb,CAAsBjB,WAAW,CAACkB,iBAAZ,EAAtB,CAAzC;AACD,OAJA,EAKAC,GALA,CAKK,UAAAC,OAAO;AAAA,4BACX,QAAC,OAAD,oBAA8BA,OAA9B,GAAcA,OAAO,CAACf,EAAtB;AAAA;AAAA;AAAA;AAAA,iBADW;AAAA,OALZ;AADX;AAAA;AAAA;AAAA;AAAA,aAFF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAeD,CAxDD;;GAAMN,Q;;KAAAA,Q;AAyDN,eAAeA,QAAf","sourcesContent":["import React,{useState} from 'react';\n\nimport Speaker from'../Speaker/Speaker';\nimport SpeakerSearchBar from '../SpeakerSearchBar/SpeakerSearchBar';\n\nconst Speakers = () => {\n\n  const [searchQuery,setSearchQuery] = useState(\"\");\n  const speakers = [\n    {\n      imageSrc: 'speaker-component-1124',\n      name: 'Douglas Crockford',\n      id: 1124,\n      firstName: 'Douglas',\n      lastName: 'Crockford',\n      sat: true,\n      sun: false,\n      isFavorite: false,\n      bio:\n        'Douglas Crockford discovered the JSON Data Interchange Format. He is also the author of _JavaScript: The Good Parts_. He has been called a guru, but he is actually more of a mahatma.',\n    },\n    {\n      imageSrc: 'speaker-component-1530',\n      name: 'Tamara Baker',\n      id: 1530,\n      firstName: 'Tamara',\n      lastName: 'Baker',\n      sat: false,\n      sun: true,\n      isFavorite: true,\n      bio:\n        'Tammy has held a number of executive and management roles over the past 15 years, including VP engineering Roles at Molekule Inc., Cantaloupe Systems, E-Color, and Untangle Inc.',\n    },\n    {\n      imageSrc: 'speaker-component-10803',\n      name: 'Eugene Chuvyrov',\n      id: 10803,\n      firstName: 'Eugene',\n      lastName: 'Chuvyrov',\n      sat: true,\n      sun: false,\n      isFavorite: false,\n      bio:\n        'Eugene Chuvyrov is  a Senior Cloud Architect at Microsoft. He works directly with both startups and enterprises to enable their solutions in Microsoft cloud, and to make Azure better as a result of this work with partners.',\n    },\n  ];\n  return (\n    <div>\n      <SpeakerSearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-3 grid-cols-1 gap-12\">\n                {speakers\n                .filter((rec) => {\n                  const targetString = `${rec.firstName} ${rec.lastName}`.toLowerCase();\n                  return searchQuery.length === 0 ? true : targetString.includes(searchQuery.toLocaleLowerCase());\n                })\n                .map((speaker => (\n                  <Speaker key={speaker.id} {...speaker} /> )\n                  ))}\n      </div>\n    </div>\n  );\n};\nexport default Speakers;"]},"metadata":{},"sourceType":"module"}